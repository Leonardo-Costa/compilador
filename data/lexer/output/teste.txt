Line: 1, Lexeme: int, Token: KW_INT
Line: 1, Lexeme: gcd, Token: ID
Line: 1, Lexeme: (, Token: OPEN_PAR
Line: 1, Lexeme: int, Token: KW_INT
Line: 1, Lexeme: u, Token: ID
Line: 1, Lexeme: ,, Token: KW_ELSE
Line: 1, Lexeme: int, Token: KW_INT
Line: 1, Lexeme: v, Token: ID
Line: 1, Lexeme: ), Token: CLOSE_PAR
Line: 1, Lexeme: {, Token: OPEN_CUR
Line: 2, Lexeme: if, Token: KW_IF
Line: 2, Lexeme: (, Token: OPEN_PAR
Line: 2, Lexeme: v, Token: ID
Line: 2, Lexeme: <=, Token: LTE
Line: 2, Lexeme: 0, Token: NUM
Line: 2, Lexeme: ), Token: CLOSE_PAR
Line: 2, Lexeme: return, Token: KW_RETURN
Line: 2, Lexeme: u, Token: ID
Line: 2, Lexeme: ;, Token: SEMICOLON
Line: 3, Lexeme: else, Token: KW_ELSE
Line: 3, Lexeme: return, Token: KW_RETURN
Line: 3, Lexeme: gcd, Token: ID
Line: 3, Lexeme: (, Token: OPEN_PAR
Line: 3, Lexeme: v, Token: ID
Line: 3, Lexeme: ,, Token: KW_ELSE
Line: 3, Lexeme: u, Token: ID
Line: 3, Lexeme: -, Token: SUB
Line: 3, Lexeme: u, Token: ID
Line: 3, Lexeme: /, Token: DIV
Line: 3, Lexeme: v, Token: ID
Line: 3, Lexeme: *, Token: MULT
Line: 3, Lexeme: v, Token: ID
Line: 3, Lexeme: ), Token: CLOSE_PAR
Line: 3, Lexeme: ;, Token: SEMICOLON
Line: 4, Lexeme: /*, Token: COMMENT_START
Line: 4, Lexeme: u, Token: ID
Line: 4, Lexeme: -, Token: SUB
Line: 4, Lexeme: u, Token: ID
Line: 4, Lexeme: /, Token: DIV
Line: 4, Lexeme: v, Token: ID
Line: 4, Lexeme: *, Token: MULT
Line: 4, Lexeme: v, Token: ID
Line: 4, Lexeme: !=, Token: NE
Line: 4, Lexeme: u, Token: ID
Line: 4, Lexeme: mod, Token: ID
Line: 4, Lexeme: v, Token: ID
Line: 4, Lexeme: */, Token: COMMENT_END
Line: 5, Lexeme: }, Token: CLOSE_CUR
Line: 7, Lexeme: void, Token: KW_VOID
Line: 7, Lexeme: main, Token: ID
Line: 7, Lexeme: (, Token: OPEN_PAR
Line: 7, Lexeme: void, Token: KW_VOID
Line: 7, Lexeme: ), Token: CLOSE_PAR
Line: 7, Lexeme: {, Token: OPEN_CUR
Line: 8, Lexeme: int, Token: KW_INT
Line: 8, Lexeme: x, Token: ID
Line: 8, Lexeme: ;, Token: SEMICOLON
Line: 9, Lexeme: int, Token: KW_INT
Line: 9, Lexeme: y, Token: ID
Line: 9, Lexeme: ;, Token: SEMICOLON
Line: 10, Lexeme: x, Token: ID
Line: 10, Lexeme: =, Token: ATTR
Line: 10, Lexeme: input, Token: ID
Line: 10, Lexeme: (, Token: OPEN_PAR
Line: 10, Lexeme: ), Token: CLOSE_PAR
Line: 10, Lexeme: ;, Token: SEMICOLON
Line: 11, Lexeme: y, Token: ID
Line: 11, Lexeme: =, Token: ATTR
Line: 11, Lexeme: input, Token: ID
Line: 11, Lexeme: (, Token: OPEN_PAR
Line: 11, Lexeme: ), Token: CLOSE_PAR
Line: 11, Lexeme: ;, Token: SEMICOLON
Line: 12, Lexeme: output, Token: ID
Line: 12, Lexeme: (, Token: OPEN_PAR
Line: 12, Lexeme: gcd, Token: ID
Line: 12, Lexeme: (, Token: OPEN_PAR
Line: 12, Lexeme: x, Token: ID
Line: 12, Lexeme: ,, Token: KW_ELSE
Line: 12, Lexeme: y, Token: ATTR
Line: 12, Lexeme: ), Token: CLOSE_PAR
Line: 12, Lexeme: ), Token: CLOSE_PAR
Line: 12, Lexeme: ;, Token: SEMICOLON
Line: 13, Lexeme: EOF, Token: EOF