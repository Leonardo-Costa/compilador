Line: 2, Lexeme: int, Token: KW_INT
Line: 2, Lexeme: x, Token: ID
Line: 2, Lexeme: [, Token: OPEN_BRA
Line: 2, Lexeme: 10, Token: NUM
Line: 2, Lexeme: ], Token: CLOSE_BRA
Line: 2, Lexeme: ;, Token: SEMICOLON
Line: 3, Lexeme: int, Token: KW_INT
Line: 3, Lexeme: minloc, Token: ID
Line: 3, Lexeme: (, Token: OPEN_PAR
Line: 3, Lexeme: int, Token: KW_INT
Line: 3, Lexeme: a, Token: ID
Line: 3, Lexeme: [, Token: OPEN_BRA
Line: 3, Lexeme: ], Token: CLOSE_BRA
Line: 3, Lexeme: ,, Token: COMMA
Line: 3, Lexeme: int, Token: KW_INT
Line: 3, Lexeme: low, Token: ID
Line: 3, Lexeme: ,, Token: COMMA
Line: 3, Lexeme: int, Token: KW_INT
Line: 3, Lexeme: high, Token: ID
Line: 3, Lexeme: ), Token: CLOSE_PAR
Line: 3, Lexeme: {, Token: OPEN_CUR
Line: 4, Lexeme: int, Token: KW_INT
Line: 4, Lexeme: i, Token: ID
Line: 4, Lexeme: ;, Token: SEMICOLON
Line: 5, Lexeme: int, Token: KW_INT
Line: 5, Lexeme: x, Token: ID
Line: 5, Lexeme: ;, Token: SEMICOLON
Line: 6, Lexeme: int, Token: KW_INT
Line: 6, Lexeme: k, Token: ID
Line: 6, Lexeme: ;, Token: SEMICOLON
Line: 7, Lexeme: k, Token: ID
Line: 7, Lexeme: =, Token: ATTR
Line: 7, Lexeme: low, Token: ID
Line: 7, Lexeme: ;, Token: SEMICOLON
Line: 8, Lexeme: x, Token: ID
Line: 8, Lexeme: =, Token: ATTR
Line: 8, Lexeme: a, Token: ID
Line: 8, Lexeme: [, Token: OPEN_BRA
Line: 8, Lexeme: low, Token: ID
Line: 8, Lexeme: ], Token: CLOSE_BRA
Line: 8, Lexeme: ;, Token: SEMICOLON
Line: 9, Lexeme: i, Token: ID
Line: 9, Lexeme: =, Token: ATTR
Line: 9, Lexeme: low, Token: ID
Line: 9, Lexeme: +, Token: SUM
Line: 9, Lexeme: 1, Token: NUM
Line: 9, Lexeme: ;, Token: SEMICOLON
Line: 10, Lexeme: while, Token: KW_WHILE
Line: 10, Lexeme: (, Token: OPEN_PAR
Line: 10, Lexeme: i, Token: ID
Line: 10, Lexeme: <, Token: LT
Line: 10, Lexeme: high, Token: ID
Line: 10, Lexeme: ), Token: CLOSE_PAR
Line: 10, Lexeme: {, Token: OPEN_CUR
Line: 11, Lexeme: if, Token: KW_IF
Line: 11, Lexeme: (, Token: OPEN_PAR
Line: 11, Lexeme: a, Token: ID
Line: 11, Lexeme: [, Token: OPEN_BRA
Line: 11, Lexeme: i, Token: ID
Line: 11, Lexeme: ], Token: CLOSE_BRA
Line: 11, Lexeme: <, Token: LT
Line: 11, Lexeme: x, Token: ID
Line: 11, Lexeme: ), Token: CLOSE_PAR
Line: 11, Lexeme: {, Token: OPEN_CUR
Line: 12, Lexeme: x, Token: ID
Line: 12, Lexeme: =, Token: ATTR
Line: 12, Lexeme: a, Token: ID
Line: 12, Lexeme: [, Token: OPEN_BRA
Line: 12, Lexeme: i, Token: ID
Line: 12, Lexeme: ], Token: CLOSE_BRA
Line: 12, Lexeme: ;, Token: SEMICOLON
Line: 13, Lexeme: k, Token: ID
Line: 13, Lexeme: =, Token: ATTR
Line: 13, Lexeme: i, Token: ID
Line: 13, Lexeme: ;, Token: SEMICOLON
Line: 14, Lexeme: }, Token: CLOSE_CUR
Line: 15, Lexeme: i, Token: ID
Line: 15, Lexeme: =, Token: ATTR
Line: 15, Lexeme: i, Token: ID
Line: 15, Lexeme: +, Token: SUM
Line: 15, Lexeme: 1, Token: NUM
Line: 15, Lexeme: ;, Token: SEMICOLON
Line: 16, Lexeme: }, Token: CLOSE_CUR
Line: 17, Lexeme: return, Token: KW_RETURN
Line: 17, Lexeme: k, Token: ID
Line: 17, Lexeme: ;, Token: SEMICOLON
Line: 18, Lexeme: }, Token: CLOSE_CUR
Line: 19, Lexeme: void, Token: KW_VOID
Line: 19, Lexeme: sort, Token: ID
Line: 19, Lexeme: (, Token: OPEN_PAR
Line: 19, Lexeme: int, Token: KW_INT
Line: 19, Lexeme: a, Token: ID
Line: 19, Lexeme: [, Token: OPEN_BRA
Line: 19, Lexeme: ], Token: CLOSE_BRA
Line: 19, Lexeme: ,, Token: COMMA
Line: 19, Lexeme: int, Token: KW_INT
Line: 19, Lexeme: low, Token: ID
Line: 19, Lexeme: ,, Token: COMMA
Line: 19, Lexeme: int, Token: KW_INT
Line: 19, Lexeme: high, Token: ID
Line: 19, Lexeme: ), Token: CLOSE_PAR
Line: 19, Lexeme: {, Token: OPEN_CUR
Line: 20, Lexeme: int, Token: KW_INT
Line: 20, Lexeme: i, Token: ID
Line: 20, Lexeme: ;, Token: SEMICOLON
Line: 21, Lexeme: int, Token: KW_INT
Line: 21, Lexeme: k, Token: ID
Line: 21, Lexeme: ;, Token: SEMICOLON
Line: 22, Lexeme: i, Token: ID
Line: 22, Lexeme: =, Token: ATTR
Line: 22, Lexeme: low, Token: ID
Line: 22, Lexeme: ;, Token: SEMICOLON
Line: 23, Lexeme: while, Token: KW_WHILE
Line: 23, Lexeme: (, Token: OPEN_PAR
Line: 23, Lexeme: i, Token: ID
Line: 23, Lexeme: <, Token: LT
Line: 23, Lexeme: high, Token: ID
Line: 23, Lexeme: -, Token: SUB
Line: 23, Lexeme: 1, Token: NUM
Line: 23, Lexeme: ), Token: CLOSE_PAR
Line: 23, Lexeme: {, Token: OPEN_CUR
Line: 24, Lexeme: int, Token: KW_INT
Line: 24, Lexeme: t, Token: ID
Line: 24, Lexeme: ;, Token: SEMICOLON
Line: 25, Lexeme: k, Token: ID
Line: 25, Lexeme: =, Token: ATTR
Line: 25, Lexeme: minloc, Token: ID
Line: 25, Lexeme: (, Token: OPEN_PAR
Line: 25, Lexeme: a, Token: ID
Line: 25, Lexeme: ,, Token: COMMA
Line: 25, Lexeme: i, Token: ID
Line: 25, Lexeme: ,, Token: COMMA
Line: 25, Lexeme: high, Token: ID
Line: 25, Lexeme: ), Token: CLOSE_PAR
Line: 25, Lexeme: ;, Token: SEMICOLON
Line: 26, Lexeme: t, Token: ID
Line: 26, Lexeme: =, Token: ATTR
Line: 26, Lexeme: a, Token: ID
Line: 26, Lexeme: [, Token: OPEN_BRA
Line: 26, Lexeme: k, Token: ID
Line: 26, Lexeme: ], Token: CLOSE_BRA
Line: 26, Lexeme: ;, Token: SEMICOLON
Line: 27, Lexeme: a, Token: ID
Line: 27, Lexeme: [, Token: OPEN_BRA
Line: 27, Lexeme: k, Token: ID
Line: 27, Lexeme: ], Token: CLOSE_BRA
Line: 27, Lexeme: =, Token: ATTR
Line: 27, Lexeme: a, Token: ID
Line: 27, Lexeme: [, Token: OPEN_BRA
Line: 27, Lexeme: i, Token: ID
Line: 27, Lexeme: ], Token: CLOSE_BRA
Line: 27, Lexeme: ;, Token: SEMICOLON
Line: 28, Lexeme: a, Token: ID
Line: 28, Lexeme: [, Token: OPEN_BRA
Line: 28, Lexeme: i, Token: ID
Line: 28, Lexeme: ], Token: CLOSE_BRA
Line: 28, Lexeme: =, Token: ATTR
Line: 28, Lexeme: t, Token: ID
Line: 28, Lexeme: ;, Token: SEMICOLON
Line: 29, Lexeme: i, Token: ID
Line: 29, Lexeme: =, Token: ATTR
Line: 29, Lexeme: i, Token: ID
Line: 29, Lexeme: +, Token: SUM
Line: 29, Lexeme: 1, Token: NUM
Line: 29, Lexeme: ;, Token: SEMICOLON
Line: 30, Lexeme: }, Token: CLOSE_CUR
Line: 31, Lexeme: }, Token: CLOSE_CUR
Line: 32, Lexeme: void, Token: KW_VOID
Line: 32, Lexeme: main, Token: ID
Line: 32, Lexeme: (, Token: OPEN_PAR
Line: 32, Lexeme: void, Token: KW_VOID
Line: 32, Lexeme: ), Token: CLOSE_PAR
Line: 32, Lexeme: {, Token: OPEN_CUR
Line: 33, Lexeme: int, Token: KW_INT
Line: 33, Lexeme: i, Token: ID
Line: 33, Lexeme: ;, Token: SEMICOLON
Line: 34, Lexeme: i, Token: ID
Line: 34, Lexeme: =, Token: ATTR
Line: 34, Lexeme: 0, Token: NUM
Line: 34, Lexeme: ;, Token: SEMICOLON
Line: 35, Lexeme: while, Token: KW_WHILE
Line: 35, Lexeme: (, Token: OPEN_PAR
Line: 35, Lexeme: i, Token: ID
Line: 35, Lexeme: <, Token: LT
Line: 35, Lexeme: 10, Token: NUM
Line: 35, Lexeme: ), Token: CLOSE_PAR
Line: 35, Lexeme: {, Token: OPEN_CUR
Line: 36, Lexeme: x, Token: ID
Line: 36, Lexeme: [, Token: OPEN_BRA
Line: 36, Lexeme: i, Token: ID
Line: 36, Lexeme: ], Token: CLOSE_BRA
Line: 36, Lexeme: =, Token: ATTR
Line: 36, Lexeme: input, Token: ID
Line: 36, Lexeme: (, Token: OPEN_PAR
Line: 36, Lexeme: ), Token: CLOSE_PAR
Line: 36, Lexeme: ;, Token: SEMICOLON
Line: 37, Lexeme: i, Token: ID
Line: 37, Lexeme: =, Token: ATTR
Line: 37, Lexeme: i, Token: ID
Line: 37, Lexeme: +, Token: SUM
Line: 37, Lexeme: 1, Token: NUM
Line: 37, Lexeme: ;, Token: SEMICOLON
Line: 38, Lexeme: }, Token: CLOSE_CUR
Line: 39, Lexeme: sort, Token: ID
Line: 39, Lexeme: (, Token: OPEN_PAR
Line: 39, Lexeme: x, Token: ID
Line: 39, Lexeme: ,, Token: COMMA
Line: 39, Lexeme: 0, Token: NUM
Line: 39, Lexeme: ,, Token: COMMA
Line: 39, Lexeme: 10, Token: NUM
Line: 39, Lexeme: ), Token: CLOSE_PAR
Line: 39, Lexeme: ;, Token: SEMICOLON
Line: 40, Lexeme: i, Token: ID
Line: 40, Lexeme: =, Token: ATTR
Line: 40, Lexeme: 0, Token: NUM
Line: 40, Lexeme: ;, Token: SEMICOLON
Line: 41, Lexeme: while, Token: KW_WHILE
Line: 41, Lexeme: (, Token: OPEN_PAR
Line: 41, Lexeme: i, Token: ID
Line: 41, Lexeme: <, Token: LT
Line: 41, Lexeme: 10, Token: NUM
Line: 41, Lexeme: ), Token: CLOSE_PAR
Line: 41, Lexeme: {, Token: OPEN_CUR
Line: 42, Lexeme: output, Token: ID
Line: 42, Lexeme: (, Token: OPEN_PAR
Line: 42, Lexeme: x, Token: ID
Line: 42, Lexeme: [, Token: OPEN_BRA
Line: 42, Lexeme: i, Token: ID
Line: 42, Lexeme: ], Token: CLOSE_BRA
Line: 42, Lexeme: ), Token: CLOSE_PAR
Line: 42, Lexeme: ;, Token: SEMICOLON
Line: 43, Lexeme: i, Token: ID
Line: 43, Lexeme: =, Token: ATTR
Line: 43, Lexeme: i, Token: ID
Line: 43, Lexeme: +, Token: SUM
Line: 43, Lexeme: 1, Token: NUM
Line: 43, Lexeme: ;, Token: SEMICOLON
Line: 44, Lexeme: }, Token: CLOSE_CUR
Line: 45, Lexeme: }, Token: CLOSE_CUR